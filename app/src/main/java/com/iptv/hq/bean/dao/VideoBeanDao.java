package com.iptv.hq.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.iptv.hq.bean.VideoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_BEAN".
*/
public class VideoBeanDao extends AbstractDao<VideoBean, Long> {

    public static final String TABLENAME = "VIDEO_BEAN";

    /**
     * Properties of entity VideoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ResCode = new Property(1, String.class, "resCode", false, "RES_CODE");
        public final static Property Position = new Property(2, int.class, "position", false, "POSITION");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property PlayURL = new Property(4, String.class, "playURL", false, "PLAY_URL");
        public final static Property IsPlay = new Property(5, boolean.class, "isPlay", false, "IS_PLAY");
        public final static Property CurrentPosition = new Property(6, long.class, "currentPosition", false, "CURRENT_POSITION");
        public final static Property Duration = new Property(7, long.class, "duration", false, "DURATION");
        public final static Property VideoType = new Property(8, String.class, "videoType", false, "VIDEO_TYPE");
        public final static Property PlayCount = new Property(9, int.class, "playCount", false, "PLAY_COUNT");
    }


    public VideoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RES_CODE\" TEXT UNIQUE ," + // 1: resCode
                "\"POSITION\" INTEGER NOT NULL ," + // 2: position
                "\"TITLE\" TEXT," + // 3: title
                "\"PLAY_URL\" TEXT," + // 4: playURL
                "\"IS_PLAY\" INTEGER NOT NULL ," + // 5: isPlay
                "\"CURRENT_POSITION\" INTEGER NOT NULL ," + // 6: currentPosition
                "\"DURATION\" INTEGER NOT NULL ," + // 7: duration
                "\"VIDEO_TYPE\" TEXT," + // 8: videoType
                "\"PLAY_COUNT\" INTEGER NOT NULL );"); // 9: playCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String resCode = entity.getResCode();
        if (resCode != null) {
            stmt.bindString(2, resCode);
        }
        stmt.bindLong(3, entity.getPosition());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String playURL = entity.getPlayURL();
        if (playURL != null) {
            stmt.bindString(5, playURL);
        }
        stmt.bindLong(6, entity.getIsPlay() ? 1L: 0L);
        stmt.bindLong(7, entity.getCurrentPosition());
        stmt.bindLong(8, entity.getDuration());
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(9, videoType);
        }
        stmt.bindLong(10, entity.getPlayCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String resCode = entity.getResCode();
        if (resCode != null) {
            stmt.bindString(2, resCode);
        }
        stmt.bindLong(3, entity.getPosition());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String playURL = entity.getPlayURL();
        if (playURL != null) {
            stmt.bindString(5, playURL);
        }
        stmt.bindLong(6, entity.getIsPlay() ? 1L: 0L);
        stmt.bindLong(7, entity.getCurrentPosition());
        stmt.bindLong(8, entity.getDuration());
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(9, videoType);
        }
        stmt.bindLong(10, entity.getPlayCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoBean readEntity(Cursor cursor, int offset) {
        VideoBean entity = new VideoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // resCode
            cursor.getInt(offset + 2), // position
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // playURL
            cursor.getShort(offset + 5) != 0, // isPlay
            cursor.getLong(offset + 6), // currentPosition
            cursor.getLong(offset + 7), // duration
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // videoType
            cursor.getInt(offset + 9) // playCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosition(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlayURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsPlay(cursor.getShort(offset + 5) != 0);
        entity.setCurrentPosition(cursor.getLong(offset + 6));
        entity.setDuration(cursor.getLong(offset + 7));
        entity.setVideoType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlayCount(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
